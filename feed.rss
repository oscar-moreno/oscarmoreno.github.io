<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Oscar Moreno - iOS Developer Ô£ø</title><description>Articles about Swift and Apple development</description><link>http://oscarmoreno.com</link><language>en</language><lastBuildDate>Mon, 3 Jul 2023 13:49:46 +0200</lastBuildDate><pubDate>Mon, 3 Jul 2023 13:49:46 +0200</pubDate><ttl>250</ttl><atom:link href="http://oscarmoreno.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">http://oscarmoreno.com/blog/returning-multiple-values-from-functions</guid><title>Returning Multiple Values from a Function: Tuples vs. Collections</title><description>Learn how you can return multiple values from a single function</description><link>http://oscarmoreno.com/blog/returning-multiple-values-from-functions</link><pubDate>Mon, 12 Jun 2023 08:00:00 +0200</pubDate><content:encoded><![CDATA[<p>Working as iOS developers, we often come across scenarios where we need to return multiple values from a function. Swift provides us with two useful approaches to achieve this: using tuples and collections. In this article, we will explore both methods and understand when to use each one.</p><h2>Using Tuples</h2><p>Tuples are lightweight data structures that allow us to group multiple values together. They provide a simple way to return multiple values from a function. Consider the following example:</p><pre><code><span class="keyword">func</span> getMovieDetails(movieId: <span class="type">Int</span>) -&gt; (<span class="type">String</span>, <span class="type">String</span>) {
    <span class="comment">// Retrieve movie details from the database</span>
    <span class="keyword">let</span> movieTitle = <span class="string">"Back to the Future"</span>
    <span class="keyword">let</span> director = <span class="string">"Robert Zemeckis"</span>

    <span class="keyword">return</span> (movieTitle, director)
}

<span class="keyword">let</span> movieDetails = <span class="call">getMovieDetails</span>(movieId: <span class="number">1</span>)
<span class="call">print</span>(<span class="string">"Title:</span> \(movieDetails.<span class="number">0</span>)<span class="string">"</span>)
<span class="call">print</span>(<span class="string">"Director:</span> \(movieDetails.<span class="number">2</span>)<span class="string">"</span>)
</code></pre><p>In this example, the getMovieDetails function returns a tuple containing the movie title and director. We can access individual values using dot syntax and the corresponding index. Tuples are handy when we have a fixed number of values to return.</p><h2>Using Collections</h2><p>Collections, such as arrays or dictionaries, offer a more flexible approach for returning multiple values. Let's see how we can modify our previous example to utilize an array:</p><pre><code><span class="keyword">func</span> getMovieDetails(movieId: <span class="type">Int</span>) -&gt; [<span class="type">String</span>] {
    <span class="comment">// Retrieve movie details from the database</span>
    <span class="keyword">let</span> movieTitle = <span class="string">"Back to the Future"</span>
    <span class="keyword">let</span> releaseYear = <span class="number">1985</span>
    <span class="keyword">let</span> director = <span class="string">"Robert Zemeckis"</span>

    <span class="keyword">return</span> [movieTitle, <span class="type">String</span>(releaseYear), director]
}

<span class="keyword">let</span> movieDetails = <span class="call">getMovieDetails</span>(movieId: <span class="number">1</span>)
<span class="call">print</span>(<span class="string">"Title:</span> \(movieDetails[<span class="number">0</span>])<span class="string">"</span>)
<span class="call">print</span>(<span class="string">"Release Year:</span> \(movieDetails[<span class="number">1</span>])<span class="string">"</span>)
<span class="call">print</span>(<span class="string">"Director:</span> \(movieDetails[<span class="number">2</span>])<span class="string">"</span>)
</code></pre><p>Here, the getMovieDetails function returns an array of strings, containing the movie title, release year (converted to a string), and director. We access the values by their respective indices. Collections are advantageous when we have a varying number of values to return or if the number of values may change in the future.</p><h2>Choosing Between Tuples and Collections</h2><p>When deciding between tuples and collections, consider the following guidelines:</p><ul><li>Use tuples when you have a fixed number of values that won't change.</li><li>Use collections when the number of values may vary or when you need to easily add or remove values.</li></ul><h2>Conclusion</h2><p>Returning multiple values from a function in Swift is essential in many programming scenarios. By utilizing tuples or collections, we can efficiently handle these situations. Tuples are suitable for returning a fixed number of values, while collections offer flexibility when the number of values may vary. Understanding these techniques empowers us to write cleaner, more expressive code.</p><p>Remember to experiment with these concepts using real-world examples and explore how they can be applied to your own projects.</p><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/understanding-basics-functions</guid><title>Understanding the Basics of Swift Functions</title><description>Functions let us organize code, reuse it, and avoid duplications.</description><link>http://oscarmoreno.com/blog/understanding-basics-functions</link><pubDate>Mon, 29 May 2023 08:00:00 +0200</pubDate><content:encoded><![CDATA[<p>As a developer, it's essential to understand the fundamental concepts of programming. One such concept is functions, which play a crucial role in organizing and reusing code. In this article, we'll explore the basics of functions in Swift. Whether you're a beginner or looking for a refresher, this guide will help you grasp the essentials of functions in a simple and straightforward manner.</p><h2>What are Functions?</h2><p>A function is a block of code that performs a specific task. It allows you to encapsulate a set of instructions under a meaningful name, making your code more organized and modular. Functions can accept input values, called parameters, and return output values. They provide a way to break down complex logic into smaller, manageable parts.</p><h2>Syntax and Structure:</h2><p>In Swift, a function declaration begins with the <code>func</code> keyword, followed by the function name and parentheses. If the function accepts parameters, they are specified within the parentheses. The return type is indicated by an arrow <code>-&gt;</code> followed by the type. Here's an example:</p><pre><code><span class="keyword">func</span> greet(name: <span class="type">String</span>) -&gt; <span class="type">String</span> {
    <span class="keyword">return</span> <span class="string">"Hello,</span> \(name)<span class="string">!"</span>
}
</code></pre><p>In this example, we have a function named "greet" that accepts a parameter called "name" of type String. It returns a String value containing a greeting message with the provided name.</p><h3>Example Scenario</h3><p>Let's say we're building an app related to TV shows. We can create a function to recommend a show based on the user's preferences. Here's an example:</p><pre><code><span class="keyword">func</span> recommendShow(userPreference: <span class="type">String</span>) -&gt; <span class="type">String</span> {
    <span class="keyword">if</span> userPreference == <span class="string">"action"</span> {
        <span class="keyword">return</span> <span class="string">"You should watch 'Game of Thrones'!"</span>
    } <span class="keyword">else if</span> userPreference == <span class="string">"comedy"</span> {
        <span class="keyword">return</span> <span class="string">"I recommend 'Friends'!"</span>
    } <span class="keyword">else</span> {
        <span class="keyword">return</span> <span class="string">"I'm sorry, I don't have a recommendation for your preference."</span>
    }
}
</code></pre><p>When calling this function with different preferences, such as "action" or "comedy," it will return an appropriate recommendation. If the user preference doesn't match any specific case, a default message is returned.</p><h2>When to Use Functions</h2><p>Functions are particularly useful in the following scenarios:</p><h3>Reusability</h3><p>If you find yourself performing the same task or calculation at multiple places in your code, it's a good indication to create a function for that task. This way, you can reuse the code without duplicating it.</p><h3>Modularity</h3><p>Functions help in organizing code into smaller, self-contained units. This improves code readability and maintainability.</p><h3>Abstraction</h3><p>By encapsulating complex logic within functions, you can abstract away the implementation details and focus on the higher-level functionality.</p><h2>Conclusion</h2><p>Understanding the basics of functions is essential for any developer. They allow you to write clean, reusable code and improve the structure of your programs. In this article, we explored the syntax and structure of functions in Swift, along with an example scenario using TV show preferences. By leveraging functions effectively, you can create more modular and maintainable code.</p><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/discovering-defer-swift</guid><title>Discovering Defer in Swift</title><description>Execute a block of code later in the program's flow</description><link>http://oscarmoreno.com/blog/discovering-defer-swift</link><pubDate>Mon, 15 May 2023 08:00:00 +0200</pubDate><content:encoded><![CDATA[<p>In Swift, there are various language constructs that make programming more efficient and robust.</p><p>One such construct is the <code>defer</code> statement, which allows developers to execute a block of code later in the program's flow. This article aims to explain how <code>defer</code> works in Swift, provide examples of its usage, and highlight the scenarios in which it can be beneficial.</p><p>Is used to define a block of code that is executed when the current scope is exited, regardless of how the scope is exited‚Äîwhether through a return statement, an error, or a break. Have in mind that, in case your app stops running because a runtime error or a crash, deferred code doesn't execute.</p><p>It ensures that specific cleanup or finalization code is executed before leaving the scope, regardless of the execution path.</p><h2>Syntax of Defer</h2><p>The syntax is simple. You begin with the keyword <code>defer</code> followed by the code block you want to execute later. Here's an example:</p><pre><code><span class="keyword">func</span> processFile() {
    <span class="call">print</span>(<span class="string">"Opening file..."</span>)
    <span class="keyword">defer</span> {
        <span class="call">print</span>(<span class="string">"Closing file..."</span>)
    }

    <span class="comment">// Code for processing the file goes here
    // This code will be executed before the file is closed</span>
}
</code></pre><p>In this example, the "Opening file..." message is printed first, and then the defer block is defined.</p><p>The defer block contains the code that will be executed at the end, just before leaving the scope. In this case, the message "Closing file..." will always be printed, ensuring the file is properly closed.</p><h2>Use Cases of Defer</h2><p>The defer statement is particularly useful in scenarios where you need to ensure resources are properly released or actions are performed regardless of the execution path. Some common use cases include:</p><h3>Resource Cleanup</h3><p>When working with files, databases, or network connections, you can use the defer statement to ensure that resources are released, connections are closed, or transactions are committed.</p><h3>Lock Release</h3><p>If you acquire a lock or a semaphore, the defer statement can help release it even if an exception occurs or if the code block is exited prematurely.</p><h3>State Restoration</h3><p>In complex workflows or asynchronous operations, you can use the defer statement to restore the state to a consistent or initial condition before exiting the scope.</p><h3>Logging and Debugging</h3><p>The defer statement can be employed to log or report information for debugging purposes before leaving the current scope.</p><h2>Conclusion</h2><p>The defer statement in Swift is a powerful language construct that allows developers to defer the execution of code until the end of a scope. It ensures that specific cleanup or finalization code is executed regardless of how the scope is exited.</p><p>By leveraging the defer statement, developers can write more resilient and organized code, making it easier to handle resource cleanup and ensure the desired behavior in various scenarios.</p><p>Remember, the defer statement can be particularly handy when working with resources, locks, state management, and debugging needs.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/guard-early-exit-swift</guid><title>Understanding the Guard Statement for Early Exit</title><description>Exit early from a code block</description><link>http://oscarmoreno.com/blog/guard-early-exit-swift</link><pubDate>Tue, 2 May 2023 08:00:00 +0200</pubDate><content:encoded><![CDATA[<p>In iOS programming, one powerful construct that helps streamline code readability and improve control flow is the <code>guard</code> statement. This statement acts as a gatekeeper, allowing us to gracefully handle exceptional scenarios and exit early from a code block.</p><p>In this article, you will discover the benefits of the <code>guard</code> statement, explore its usage, and provide examples to illustrate its effectiveness.</p><h2>Understanding the guard Statement</h2><p>The <code>guard</code> statement serves as a conditional early exit mechanism in Swift, the programming language for iOS development.</p><p>It allows us to check for specific conditions and ensure that they are met before continuing the execution of a code block.</p><p>If the conditions aren't met, the <code>guard</code> statement terminates the current scope, enabling us to handle failure scenarios elegantly.</p><p>The syntax for a <code>guard</code> statement is as follows:</p><pre><code><span class="keyword">guard</span> condition <span class="keyword">else</span> {
    <span class="comment">// Code to handle the failure case
    // Return, throw, or perform any necessary cleanup</span>
}

<span class="comment">// Code to execute when the condition is successfully met</span>
</code></pre><p>When a <code>guard</code> statement is encountered, the specified condition is evaluated.</p><p>If the condition evaluates to false, the code within the else block is executed.</p><p>This block typically contains code to handle the failure case, such as returning from the function, throwing an error, or performing any necessary cleanup. If the condition evaluates to true, the code continues executing normally after <code>guard</code>.</p><h3>Early Exit for Unacceptable Conditions</h3><p><code>guard</code> statements can help avoid nested conditional statements by providing early exits for conditions that are considered unacceptable. This simplifies code and improves readability. For instance:</p><pre><code><span class="keyword">let</span> amount = <span class="number">500</span>
<span class="keyword">let</span> accountBalance = <span class="number">1000</span>

<span class="keyword">guard</span> amount &lt;= accountBalance <span class="keyword">else</span> {
    <span class="call">print</span>(<span class="string">"Insufficient funds!"</span>)
    <span class="keyword">return</span>
}
<span class="comment">// Perform payment operation</span>

</code></pre><h2>Another Use Cases</h2><p>There are other use cases for <code>guard</code>, specifically related to Optionals and Error handling. However, since these are more advanced topics, in my opinion, it is better only mention them now, and explore them in detail in future advanced posts.</p><h3>Input Validation</h3><p><code>guard</code> statement is often used to validate input parameters, ensuring that they meet certain requirements before proceeding. This case is used handling optionals.</p><h3>Resource Deallocation</h3><p>In this case, <code>guard</code> is handy when dealing with resources that require cleanup. It ensures that the cleanup code is executed whenever a failure condition is encountered.</p><h2>Conclusion</h2><p>The <code>guard</code> statement is a powerful tool in iOS programming that allows for clean, concise, and efficient code. It provides an elegant way to handle failure scenarios and gracefully exit from a code block when certain conditions are not met.</p><p>By using the <code>guard</code> statement effectively, you can improve the readability and maintainability of your code.</p><p>Embrace this construct in your iOS projects, and enjoy the benefits of a more streamlined development process.</p><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/control-transfer-statements-swift</guid><title>Exploring Control Transfer Statements in Swift</title><description>Altering the flow of execution within the code</description><link>http://oscarmoreno.com/blog/control-transfer-statements-swift</link><pubDate>Mon, 17 Apr 2023 08:00:00 +0200</pubDate><content:encoded><![CDATA[<p>Control transfer statements are essential tools in programming that allow developers to alter the flow of execution within their code.</p><p>In Swift, three commonly used control transfer statements are <code>continue</code>, <code>break</code>, and <code>fallthrough</code>.</p><p>In this article, we will examine into each of these statements, providing examples and explaining the scenarios where they are most appropriate to use.</p><h2>Continue</h2><p>The <code>continue</code> statement is primarily used within loop constructs (such as ‚Äòfor-in' or 'while') to skip the remaining code within the current iteration and proceed to the next iteration.It allows you to selectively skip over specific parts of a loop without terminating it entirely. Here's an example to illustrate its usage:</p><pre><code><span class="keyword">for</span> number <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span> {
    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> {
        <span class="keyword">continue</span>
    }
    <span class="call">print</span>(number)
}
</code></pre><p>Output</p><pre><code><span class="number">1
3
5
7
9</span>
</code></pre><p>In this example, the <code>continue</code> statement is used to skip printing even numbers. When the condition <code>number % 2 == 0</code> is true, the <code>continue</code> statement is executed, bypassing the <code>print</code> statement and proceeding to the next iteration.</p><h2>Break</h2><p>The <code>break</code> statement is used to terminate the execution of a loop or switch statement prematurely. It allows you to exit out of a loop or switch block before reaching its natural end.</p><p>Consider the following example:</p><pre><code><span class="keyword">let</span> cars = [‚Äú<span class="type">Red</span> <span class="string">Bull", ‚ÄúAston Martin", ‚ÄúFerrari", "Mercedes", "McClaren"]</span>

<span class="keyword">for</span> name <span class="keyword">in</span> names {
    <span class="keyword">if</span> name == <span class="string">"Mercedes"</span> {
        <span class="keyword">break</span>
    }
    <span class="call">print</span>(name)
}
</code></pre><p>Output</p><pre><code><span class="type">Red Bull
Aston Martin
Ferrari</span>
</code></pre><p>In this case, the <code>break</code> statement is used to exit the loop once the condition <code>name == "Mercedes"</code> is true. As a result, the loop terminates prematurely, and the remaining elements in the <code>cars</code> array are not printed.</p><h2>Fallthrough</h2><p>The <code>fallthrough</code> statement is exclusively used within switch statements. It allows the control flow to move to the next case without performing an implicit <code>break</code>.</p><p>This behavior differs from the default behavior of a switch statement, where control automatically exits the switch block after a case is matched.</p><p>Consider the following example:</p><pre><code><span class="keyword">let</span> grade = <span class="string">"A"</span>

<span class="keyword">switch</span> grade {
    <span class="keyword">case</span> <span class="string">"A"</span>:
        <span class="call">print</span>(<span class="string">"Excellent"</span>)
        <span class="keyword">fallthrough
    case</span> <span class="string">"B"</span>:
        <span class="call">print</span>(‚Äú<span class="type">You</span> have <span class="string">approved")</span>
    <span class="keyword">case</span> <span class="string">"C"</span>:
        <span class="call">print</span>(<span class="string">"Average"</span>)
    <span class="keyword">default</span>:
        <span class="call">print</span>(<span class="string">"Incomplete"</span>)
}
</code></pre><p>Output</p><pre><code><span class="type">Excellent
Good</span>
</code></pre><p>In this example, when the grade is "A," the <code>fallthrough</code> statement is used to continue the execution to the next case without exiting the switch block. As a result, both "Excellent" and "You have approved" are printed.</p><h2>Conclusion</h2><p>Understanding control transfer statements like <code>continue</code>, <code>break</code>, and <code>fallthrough</code> is crucial for effective Swift programming.</p><p><code>continue</code> allows you to skip specific iterations within loops, <code>break</code> enables premature termination of loops or switch statements, and <code>fallthrough</code> allows control to flow to the next case in a switch statement. By leveraging these statements appropriately, you can enhance the flexibility and control of your code execution in iOS development.</p><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/conditional-statements-swift</guid><title>Swift Fundamentals about Conditionals</title><description>Controling the program's behavior based on conditions</description><link>http://oscarmoreno.com/blog/conditional-statements-swift</link><pubDate>Mon, 3 Apr 2023 08:00:00 +0200</pubDate><content:encoded><![CDATA[<p>Understanding the fundamentals of Swift programming is crucial to creating robust and efficient applications.</p><p>One of the key concepts you need to grasp is conditional statements. In this article, we will navigate into the world of conditional statements in Swift, exploring their syntax, examples, and best practices for using them effectively. So let's go!</p><h2>Conditional Statements: Making Decisions in Swift</h2><p>In programming, there are often situations where you need your app to make decisions based on certain conditions. This is where conditional statements come into play, enabling you to execute specific blocks of code depending on whether a condition evaluates to true or false.</p><p>Swift offers three primary conditional statements: <code>if</code> statements, <code>if</code>-<code>else</code> statements, and <code>switch</code> statements.</p><p>Each statement serves a distinct purpose, and understanding when to use them is essential for writing clean and maintainable code.</p><h3>The If Statement</h3><p>The <code>if</code> statement is the simplest form of conditional statement in Swift. It allows you to execute a block of code only if a specified condition is true.</p><p>For example, let's say you want to display a message if a user's age is greater than or equal to 18:</p><pre><code><span class="keyword">let</span> userAge = <span class="number">20</span>

<span class="keyword">if</span> userAge &gt;= <span class="number">18</span> {
    <span class="call">print</span>(<span class="string">"Welcome! You can access."</span>)
}
</code></pre><h3>The If-Else Statement</h3><p>The <code>if</code>-<code>else</code> statement expands upon the if statement by providing an alternative block of code to execute when the condition evaluates to false.</p><p>Consider the following example that checks whether a number is positive or negative:</p><pre><code><span class="keyword">let</span> number = -<span class="number">5</span>

<span class="keyword">if</span> number &gt; <span class="number">0</span> {
    <span class="call">print</span>(<span class="string">"The number is positive."</span>)
} <span class="keyword">else</span> {
    <span class="call">print</span>(<span class="string">"The number is negative."</span>)
}
</code></pre><h3>The Switch Statement</h3><p>The <code>switch</code> statement offers a more concise way to handle multiple possible conditions. It evaluates a given value against various cases and executes the code block associated with the first matching case.</p><p>Let's say you want to display a message based on a user's role:</p><pre><code><span class="keyword">let</span> userRole = <span class="string">"admin"</span>

<span class="keyword">switch</span> userRole {
<span class="keyword">case</span> <span class="string">"admin"</span>:
    <span class="call">print</span>(<span class="string">"Welcome, administrator!"</span>)
<span class="keyword">case</span> <span class="string">"user"</span>:
    <span class="call">print</span>(<span class="string">"Welcome, user!"</span>)
<span class="keyword">default</span>:
    <span class="call">print</span>(<span class="string">"Unknown role."</span>)
}
</code></pre><h2>Best Practices for Using Conditional Statements:</h2><h3>Keep it simple</h3><p>Aim to write concise and readable code. Avoid complex nested conditions that can make your code difficult to understand and maintain.</p><h3>Use appropriate operators</h3><p>Swift provides a range of comparison and logical operators, such as <code>&lt;</code>, <code>&gt;</code>, <code>==</code>, <code>&amp;&amp;</code>, <code>||</code>, to construct meaningful conditions.</p><h3>Plan for all possibilities</h3><p>Ensure you account for all possible scenarios in your conditional statements. The default case in <code>switch</code> acts as a catch-all for unmatched conditions.</p><h3>Test your code</h3><p>Validate your conditional statements with different inputs to ensure they behave as expected. Unit testing is a valuable practice to identify and fix any issues early on.</p><h2>Conclusion</h2><p>Conditional statements are fundamental tools for iOS developers, allowing you to make decisions and control the flow of your code based on specific conditions. By mastering <code>if</code> statements, <code>if</code>-<code>else</code> statements, and <code>switch</code> statements, you gain the ability to create dynamic and responsive applications.</p><p>Remember to use these statements wisely, keeping your code clean and understandable.</p><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/loops-swift</guid><title>Exploring Loops in Swift</title><description>Iterating and performing repetitive tasks</description><link>http://oscarmoreno.com/blog/loops-swift</link><pubDate>Mon, 20 Mar 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>In iOS development, flow control statements play a crucial role in directing the execution of code.</p><p>It allow developers to iterate over collections, perform repetitive tasks, and control the program's behavior based on certain conditions. In this post, we will dive into three essential flow control statements in Swift: <code>for</code>-<code>in</code>, <code>while</code>, and <code>repeat</code>-<code>while</code>.</p><p>Whether you're a junior iOS developer or someone looking to refresh their knowledge, understanding these statements is essential for building robust and efficient iOS applications.</p><h2>For-In Loops: Simplifying iteration</h2><p>The <code>for</code>-<code>in</code> loop is particularly useful when you want to iterate over a collection of elements, such as an array or a dictionary. It simplifies the process of accessing each element without the need for manual indexing. Let's take a look at an example:</p><pre><code><span class="keyword">let</span> books = [‚Äú<span class="type">A Game</span> of <span class="type">Thrones</span>‚Äù,
        ‚Äú<span class="type">A Clash</span> of <span class="type">Kings</span>‚Äù,
         ‚Äú<span class="type">A Storm</span> of <span class="type">Swords</span>‚Äù,
        ‚Äù<span class="type">A Feast</span> <span class="keyword">for</span> <span class="type">Crows</span>‚Äù,
        ‚Äú<span class="type">A Dance</span> with <span class="type">Dragons</span>‚Äù]

<span class="keyword">for</span> book <span class="keyword">in</span> books {
    <span class="call">print</span>(book)
}
</code></pre><p>In this example, the <code>for</code>-<code>in</code> loop iterates over each element in the books array and prints it title. The loop automatically assigns each element to the book constant, allowing you to perform operations on it within the loop's scope.</p><p>This loop is ideal for scenarios such as:</p><ul><li>Enumerating through an array to perform operations on each element.</li><li>Iterating over a dictionary to access both the keys and values.</li><li>Looping over a range of numbers or characters.</li></ul><h2>While Loops: Executing Code Conditionally</h2><p>The while loop executes a block of code repeatedly as long as a given condition remains true. This is particularly useful when you don't know the exact number of iterations in advance. Here's an example to illustrate its usage:</p><pre><code><span class="keyword">var</span> count = <span class="number">0</span>
<span class="keyword">while</span> count &lt; <span class="number">5</span> {
    <span class="call">print</span>(<span class="string">"Count:</span> \(count)<span class="string">"</span>)
    count += <span class="number">1</span>
}
</code></pre><p>In this example, the while loop will continue executing as long as the count variable is less than 5. It prints the current value of count and increments it by 1 in each iteration. Be cautious when using while loops to ensure that the condition eventually becomes false; otherwise, it can result in an infinite loop.</p><p>Consider using the while loop in the following situations:</p><ul><li>Repeatedly performing an action until a specific condition is met.</li><li>Implementing input validation and continuously asking for user input until valid data is provided.</li><li>Interacting with external systems or processes that require continuous monitoring.</li></ul><h2>Repeat-While Loop: Ensuring First Code Execution</h2><p>The <code>repeat</code>-<code>while</code> loop is similar to the <code>while</code> loop, but with a crucial difference: the condition is evaluated at the end of the loop. This guarantees that the code block executes at least once, even if the condition is initially false. Here's an example:</p><pre><code><span class="keyword">var</span> number = <span class="number">10</span>
<span class="keyword">repeat</span> {
    <span class="call">print</span>(number)
    number -= <span class="number">2</span>
} <span class="keyword">while</span> number &gt; <span class="number">0</span>
</code></pre><p>In this example, the <code>repeat</code>-<code>while</code> loop prints the value of number and subtracts 2 from it until number becomes 0 or less. Unlike the <code>while</code> loop, the <code>repeat</code>-<code>while</code> loop executes the code block first and then checks the condition.</p><p>Is suitable for scenarios like:</p><ul><li>Implementing menu-driven systems where you want to ensure execution before checking for user choices.</li><li>Handling game logic where an action must be performed at least once before checking for game-ending conditions.</li><li>Repeating an operation until a specific condition is met.</li></ul><h2>Conclusion</h2><p>Understanding flow control statements like <code>for</code>-<code>in</code>, while, and <code>repeat</code>-`while is fundamental for any iOS developer.</p><p>These statements enable you to control the program's flow, iterate over collections, and execute code conditionally. By mastering these flow control statements, you'll have the ability to build more efficient and dynamic iOS applications.</p><p>Utilize these statements wisely, paying attention to loop termination conditions to avoid infinite loops. Keep exploring their capabilities and experimenting with different scenarios to enhance your programming skills.</p><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/swift-collection-types</guid><title>Swift Collection Types</title><description>Swift has three collection types to manage common values.</description><link>http://oscarmoreno.com/blog/swift-collection-types</link><pubDate>Mon, 6 Mar 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>The collections are one of the most used data structure when you are programming so, it is extremely important know the different approach you dispose to work with them.</p><p>Collection types are complex data types, and Swift allow use three collection types: Arrays, Sets and Dictionaries for manage related values.</p><p>The reliability of these collections is based on the types of values and keys that you can store. When you create an instance of a collection, you need to confirm the type of values that it manages. This means that: you cannot store different types that you previously defined, and you can be sure the type of data you will retrieve when you manage a collection.</p><p>Also, thanks to type inference, you can specify the type, or Swift will infere the type.</p><h2>Collection Mutability</h2><p>As well as variables and constants, collections can be mutable or unmutable depending on how was created.</p><p>If you store an array, set or a dictionary in a variable, you can mutate the collection, because you can add, remove or change a single or multiple values in these collection.</p><p>But, if you store it in a constant, you cannot add new elements or modify the ones with was instantiated.</p><h2>Diferences between arrays, sets and dictionaries</h2><p>Arrays are ordered collections, where duplications are allowed and values can be accessed by a numeric index (position in the array)</p><p>Sets are unordered collections where duplications are no allowed, and values can be iterated, but cannot be accesed by an index or key.</p><p>Dictionaries are unordered collections composed by key-value associations.</p><h2>Fundamentals of different collection types</h2><h3>Arrays</h3><p>If you want to create an empty array, you will need specify the data type. There are different ways to create an empty array, this a example.</p><pre><code><span class="keyword">var</span> numbers = [<span class="type">Int</span>]()
</code></pre><p>But, if you want to create it with values, you don't need specify the types. Next, you can see how to create an strings array</p><pre><code><span class="keyword">var</span> tutorials = [<span class="string">"SwiftUI"</span>, <span class="string">"Combine"</span>, <span class="string">"AsyncAwait"</span>] 
</code></pre><p>And, if you need to access to a value, you must indicate the position of the value in the array. But, remember that collections index starts by 0.</p><pre><code><span class="keyword">let</span> firstCourse = tutorials[<span class="number">0</span>]
</code></pre><p>The above code will store "SwiftUI" in <code></code><code>firstCourse</code><code></code> constant.</p><h3>Sets</h3><p>Again, you will need specify data type for create an empty set.</p><pre><code><span class="keyword">var</span> numbers = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()
</code></pre><p>Create a set with values, is similar to create an array but, in this case, you will need to specify that is a set to don't create an array</p><pre><code><span class="keyword">var</span> tutorials = [<span class="string">"SwiftUI"</span>, <span class="string">"Combine"</span>, <span class="string">"AsyncAwait"</span>] 
</code></pre><p>But, in this case, as sets have not an index, you cannot use it to access to the data. At least, you can check if the value exists.</p><pre><code><span class="keyword">var</span> swiftuiExists = tutorials.<span class="call">contains</span>(<span class="string">"SwiftUI"</span>)
</code></pre><p>The above code wil store true in <code></code><code>swiftuiExists</code><code></code> variable</p><h3>Dictionaries</h3><p>And, lastly, you can create an empty dictionary specifying both the key type and the value type</p><pre><code><span class="keyword">var</span> nameOfNumbers = [<span class="type">Int</span>: <span class="type">String</span>]()
</code></pre><p>To create a dictionary with values, it is also similar to an array, but you have to write the key of each value. Remember that the keys must be uniques.</p><pre><code><span class="keyword">var</span> requirements = [<span class="string">"View"</span>:<span class="string">"SwiftUI"</span>, <span class="string">"Database"</span>:<span class="string">"CoreData"</span>, <span class="string">"AugmentedReality"</span>:<span class="string">"ARKit"</span>]
</code></pre><p>And, if you want to access to a value, you only need know the index</p><pre><code><span class="keyword">let</span> database = requirements[<span class="string">"Database"</span>]
</code></pre><hr><br/><p>In next posts, I will write about useful methods in collection types to manage arrays, sets and dictionaries.</p><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/useful-strings-methods-swift</guid><title>Useful String Methods in Swift</title><description>Learn useful String methods in Swift to display data as you need.</description><link>http://oscarmoreno.com/blog/useful-strings-methods-swift</link><pubDate>Mon, 20 Feb 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>This post is a complement for the previous one about <a href="../swift-strings">Swift Strings</a>.</p><p>I real-world projects, you can store a lot of strings but, it is important that you know how to transform those strings, to display them according to your view.</p><p>For this reason, let's see usual methods that you can use for it.</p><h2>Count characters</h2><p>Because a String is a Collection of Characters, you can use a very common method in Arrays: <code>count()</code></p><p>Either you can use it in a constant/variable or in a String</p><pre><code><span class="keyword">let</span> starWarsIntro = <span class="string">"A long time ago..."</span>
<span class="keyword">let</span> numberOfCharacters = starWarsIntro.<span class="call">count</span>()  <span class="comment">// numberOfCharacters value 18</span>

<span class="keyword">let</span> numberOfCharactersOfGreet = <span class="string">"Hello World!"</span>.<span class="call">count</span>() <span class="comment">// numberOfCharactersOfGreet value is 12</span>
</code></pre><p>Even you can combine values in the same String through String interpolation:</p><pre><code><span class="keyword">let</span> plotTwist = <span class="string">"I am your father"</span>
<span class="call">print</span>(<span class="string">"The number of character in</span> \(plotTwist) <span class="string">is</span> \(plotTwist)<span class="string">.count()"</span>)

<span class="comment">// It will print "The number of character in I am your father is 16"</span>
</code></pre><h2>Insert or remove</h2><p>Also it is important add or remove characters or substrings</p><h3>Insert</h3><p>For insert, you can: - Insert a character with the method <code>.insert(_ newElement:at:)</code> - Insert a substring with the method <code>.insert(contentsOf:at:)</code></p><p>In <code>at</code> you will need to write a index. You can know more about indexes in <a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters/#String-Indices">Swift official Documentation - String Indices</a></p><pre><code><span class="keyword">var</span> warning = <span class="string">"we have a problem"</span>
warning.<span class="call">insert</span>(contentsOf: <span class="string">"Houston, "</span>, at: warning.<span class="property">startIndex</span>)

<span class="call">print</span>(warning) <span class="comment">// It will print "Houston, we have a problem"</span>
</code></pre><h3>Remove</h3><p>Similar to insert, for remove Swift allow remove characters of substrings: - Remove a character with the method <code>.remove(:at:)</code> - Remove a substring with the method <code>removeSubrange(_ bounds:)</code></p><p>Be careful with don't exit out of bounds</p><pre><code><span class="keyword">var</span> greeting = <span class="string">"Hello World!"</span>
greeting.<span class="call">remove</span>(at: greeting.<span class="call">index</span>(before: greeting.<span class="property">endIndex</span>))
<span class="call">print</span>(greeting)  <span class="comment">// It will print "Hello World"</span>
</code></pre><h2>Modify strings</h2><h3>Uppercase and lowercase</h3><p>The methods that you can use for it are <code>.uppercased()</code>, <code>.lowercased()</code> or <code>.capitalized()</code></p><p>Examples:</p><pre><code><span class="keyword">let</span> lordOfTheRings = <span class="string">"A ring to rule them all"</span>
<span class="call">print</span>(lordOfTheRings.<span class="call">uppercased</span>()) <span class="comment">// It will print "A RING TO RULE THEM ALL"</span>
<span class="call">print</span>(lordOfTheRings.<span class="call">lowercased</span>()) <span class="comment">// It will print "a ring to rule them all"</span>
<span class="call">print</span>(lordOfTheRings.<span class="property">capitalized</span>) <span class="comment">// It will print "A Ring To Rule Them All"</span>
</code></pre><h3>Extract a string to an array</h3><p>For this goal you can use <code>.components(separatedBy: " ")</code></p><pre><code><span class="keyword">let</span> et = ‚Äú<span class="type">E</span>.<span class="type">T</span>. <span class="property">phone</span> home.‚Äù
<span class="keyword">let</span> etWords = et.<span class="call">components</span>(separatedBy: <span class="string">" "</span>)

<span class="comment">// etWords value is equal to ["E.T.", "phone", "home."]</span>
</code></pre><h3>Replacing occurrences</h3><p>In this case, a useful method is <code>.replacingOccurrences(of:, with:)</code>, you can replace a character or a string with another character or string</p><pre><code><span class="keyword">let</span> darkKnight = <span class="string">"I am Batman"</span>
<span class="keyword">let</span> coded = darkKnight.<span class="call">replacingOccurrences</span>(of: <span class="string">"a"</span>, with: <span class="string">"4"</span>)

<span class="comment">// coded value is equal to "I 4m B4tm4n"</span>
</code></pre><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/swift-strings</guid><title>Swift Strings</title><description>As other languages, Strings are a fundamental type that allows save text</description><link>http://oscarmoreno.com/blog/swift-strings</link><pubDate>Mon, 6 Feb 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>When you save a text in a constant or a variable, your are saving a string in Swift. Furthermore, you can see a string as a serie of characters. For that reason, you can access to the content of a string in various ways, such as Collection (Array i.e.) of characters.</p><h2>Initialize a String</h2><p>A string literal is a text writed with a double quote at beginning and at the end. So, if you need to save a text in a constant or a variable, you only must to assign a string literal to it.</p><pre><code><span class="keyword">let</span> coach = <span class="string">"Ted Lasso"</span>
<span class="keyword">var</span> team = <span class="string">"AFC Richmond"</span>
</code></pre><p><em>NOTE: It is fundamental remember that strings are case sensitive. So, "a simple string" it is different of "A simple string".</em></p><h2>Concatenating strings</h2><p>If you need to save the value of two strings in another constant or variable, you can concatenate it.</p><p>It is as easy as use the operator <code>+</code> between the two values when you have to assign it.</p><pre><code><span class="keyword">let</span> name = <span class="string">"Michael"</span>
<span class="keyword">let</span> lastName = <span class="string">"Scott"</span>

<span class="keyword">let</span> funnyBoss = name + lastName
</code></pre><p>Another way, it is to use the operator <code>+=</code> to add text to a previous initialized string</p><pre><code><span class="keyword">var</span> spy = <span class="string">"Bond"</span>
spy += <span class="string">", James Bond"</span>
</code></pre><p>In the above example, the final value of <code>spy</code> is <code>Bond, James Bond</code></p><p>And, as a String is a Collection of characters, you can also use the method <code>.append()</code></p><pre><code><span class="keyword">var</span> greet = <span class="string">"Hello, world"</span>
greet.<span class="call">append</span>(<span class="string">"!"</span>)
</code></pre><p>In the last code, greet value is <code>Hello, world!</code></p><h2>String interpolation</h2><p>But maybe the most used feature in Strings could be String interpolation. It allows use constants or variables values inside a string.</p><p>In this case, you can do it, writing the constant or variable name, inside parenthesis "()", and starting with a backlash "". That is <code>\(variableName)</code></p><pre><code><span class="keyword">let</span> name = <span class="string">"Forest"</span>
<span class="keyword">let</span> fullName = <span class="string">"Forest Gump"</span>

<span class="keyword">let</span> introduction = <span class="string">"Hello, I am</span> \(name)<span class="string">,</span> \(fullName)<span class="string">"</span>
</code></pre><p>The final value of <code>introduction</code> is <code>"Hello, I am Forest, Forest Gump"</code></p><h2>Multiline String</h2><p>Finishing (althought it is not used often in real world apps) maybe sometimes you need to save larger texts in a string, and it could be difficult read the value for others programmers o for yourself. In this case, you can use a multiline string.</p><p>To save a multiline string, you only need to write three quotation marks at the beginning, and finish with another three in a single line. For example:</p><pre><code><span class="keyword">let</span> text = <span class="string">"""
To be, or not to be, that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them? To die, to sleep;
"""</span>
</code></pre><p>First triple double quotes doesn't need to be in a single line, but it helps to focus in text value.</p><hr><br/><p>You can see useful methods in the post <a href="../useful-strings-methods-swift">Useful String methods in Swift</a></p><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/numbers-in-swift</guid><title>Numbers in Swift</title><description>Programming has been often for process numbers and obtain results so difficult to calculate for humans</description><link>http://oscarmoreno.com/blog/numbers-in-swift</link><pubDate>Mon, 30 Jan 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Programming has been often for process numbers and obtain results so difficult to calculate for humans: universe distances, planet radius, pi‚Ä¶</p><p>So, is part of fundamental learning, in Swift in particular and in programming globally.</p><p>There are basically 2 types of numbers in Swift: Integers and Floating-Point numbers. Each one represents a different range and is used for different targets.</p><h2>Integers</h2><p>A integer number (also called int, for short) is possibly the most used number. We could say that it is the most simple, because has no fractional component.</p><p>It can be positive, zero, or negative. For example, integer numbers are: 5, -3, 99, -256‚Ä¶</p><p>Also, Swift provides signed and unsigned integers for 8,16, 32 and 64 bit. Following naming convention of C, the type of 8 bit unsigned number is UInt8, whereas 16 bit signed is Int16. But, is not frequently used in most of developed apps.</p><h3>Integers range</h3><p>It depends of bits number, but each one has a max and min number to store. You can check it in next list.</p><ul><li><strong>UInt8</strong>: from 0 to 255</li><li><strong>UInt16</strong>: from 0 to 65535</li><li><strong>UInt32</strong>: from 0 to 4294967295</li><li><strong>UInt64</strong>: from 0 to 18446744073709551615</li><li><strong>Int8</strong>: from -128 to 127</li><li><strong>Int16</strong>: from -32768 to 32767</li><li><strong>Int32</strong>: from -2147483648 to 2147483647</li><li><strong>Int64</strong>: from -9223372036854775808 to 9223372036854775807</li></ul><br/><p>But, if you don‚Äôt remember the values, you can use the methods .max or .min</p><pre><code><span class="keyword">let</span> minValue = <span class="type">Int</span>.<span class="property">min</span> <span class="comment">//minValue is equal to</span>
<span class="keyword">let</span> maxValue = <span class="type">Int</span>.<span class="property">max</span> <span class="comment">//maxValue is equal to</span>
</code></pre><h2>Floating-Point numbers</h2><p>Unlike integers, floating-point numbers has a fractional component. But, like integers, can be positive or negative.<br>It exists two signed floating-point number types</p><h3>Double</h3><p>Double numbers represent a 64-bit floating-point number, and has a precision of at least 15 decimal digits.</p><h3>Float</h3><p>Float numbers represent a 32-bit floating-point number, and has a precision of at least 6 decimal digits.</p><hr><br/><p><em>NOTE: You will need Double or Float depending of multiple factors, but if either would be appropriated, Swift documentation recommends use Double.</em></p><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/constants-and-variables-swift</guid><title>Constants and Variables to Save Values in Swift</title><description>How to save and manage data values in Swift</description><link>http://oscarmoreno.com/blog/constants-and-variables-swift</link><pubDate>Mon, 16 Jan 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Programming is a way to manage data, and usually, you need save multiple values temporally: to manage it after other operations, to display it‚Ä¶</p><p>For this matter, as another programming languages, Swift is able to store values in constants and variables.</p><p>Thanks to constant and variables you are able to associate a name that you choose to a value.</p><h2>Constants</h2><p>A constant value is saved in a memory space, and it can‚Äôt be modified. After a value is established in a constant, it remains immutable.</p><h3>How to declare a constant</h3><p>To declare a constant you must start with reserved word let, followed by a name you choose. Then, you must can use the operator ‚Äò=‚Äò and assign a value.</p><p>In the next example, ‚Äòlet‚Äô is the reserved word for constants, survivor the name of the constant, and the value that is assigned to the constant ‚Äòsurvivor‚Äô is ‚ÄúJack Shepard‚Äù.</p><pre><code><span class="keyword">let</span> survivor = ‚Äú<span class="type">Jack Shepard</span>‚Äù
</code></pre><p>The value is between double quotes because is a String value type. You can read about Strings in official documentation: <a href="https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings and Characters</a></p><p>Do you know why Swift use let instead const or similar as another languages? It comes from the mathematics world, where they say things like ‚Äúlet x be equal to 5.‚Äù</p><h2>Variables</h2><p>A variable is a value that you can modify after have been declared. So, is a mutable value.</p><h3>How to declare a variable</h3><p>To declare a variable, the structure is the same as a constant, but you must use the reserved word ‚Äòvar‚Äô</p><p>Then, for declare a variable we can do</p><pre><code><span class="keyword">var</span> videogame = ‚Äú<span class="type">Metal Gear Solid</span>‚Äù
</code></pre><p>Ok but, if we can change a var value, how should we do it? Simply, you only need assign a new value, and don‚Äôt write the reserved word var</p><pre><code>videogame = ‚Äú<span class="type">Uncharted</span>‚Äù
</code></pre><h2>Naming a constant or a value</h2><p>You can use almost any character for a name of constant or variable, including Unicode characters. What means that you can use for example emojis</p><p>But it is something that a I wouldn‚Äôt recommend. Why? Because the name of a constant or a variable, should explain without any doubt what is stored within.</p><p>For example, which one explain what means the value 10?</p><pre><code><span class="keyword">let</span> times = <span class="number">10</span>

<span class="keyword">let</span> numberOfTimesIHaveSeenBackToTheFutureTrilogy = <span class="number">10</span>
</code></pre><h2>Conclusion</h2><p>So, don‚Äôt worry about numbers of characters for the name. It is more recommended use a large (but descriptive ) name than use another shorter that doesn‚Äôt specify what stores. And, nowadays, IDE‚Äôs are in charge to autocomplete names, it won‚Äôt be difficult write them üòâ</p><p>Happy coding! üë®üèª‚Äçüíª</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/my-new-first-post</guid><title>My (new) First Post</title><description>Who I am and why I have relaunch my blog</description><link>http://oscarmoreno.com/blog/my-new-first-post</link><pubDate>Mon, 2 Jan 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Hi! I am very happy today, because I have refactored my blog üòâ</p><p>This is not my first experience writing in my blog but, 2022 was a year with changes and new challenges in my working life so, I decided restart my blog to align it with what I am doing day by day.</p><p>For this reason, this is my first post, but only in this new version of my blog.</p><h2>About me</h2><p>If I have to talk about me in a sentence, I like to say that I am a passionate about programming and tech world.</p><p>Nowadays, I work as iOS Developer at <a href="http://www.hiberus.com">Hiberus</a>, a global consultancy company founded in Spain, but growing quickly and opening new offices in places such as Berl√≠n, London, M√©xico DF or Miami.</p><p>But, my work experience have been mainly focused in IT. Besides programming, I have previous experience working as QA or DevOps engineer.</p><p>Recently, because I'm a enthusiastic user of Apple products, I decided to learn Swift, and specialize in their ecosystem development. Not only for iOS devices, but for MacOS or the rest of Apple operating systems.</p><h3>My personal life</h3><p>I was born in Valencia (Spain), where I live, at 80‚Äôs, the age of Spectrum, Atari and the first Sega's or Nintendo videoconsoles. So, I grow up and enjoyed play videogames with my Sega Megadrive, watch cartoons as He-man, Dragon Ball or Captain Tsubasa.</p><p>I'm the proud father of Lucas üë∂üèª, my 2 years son that became the home CEO, and the proud husband of Lorena, the best life companion that I could have. A wonderfull woman, with a special power to treat with the childhood (And with me üòÖ)</p><p>Nowadays, I spend my non-working hours with my family or my hobbies, such as: enjoying TV Series, playing chess or watching Formula 1 races.</p><h2>Why I write in this blog</h2><h3>Knowledge</h3><p>The first reason (and the most important) is for learning. I think that there are 3 levels of knowledge: - 1st: When someone teach you something, or you learn it watching a video or reading a book - 2nd: When you are able to do what you have learned - 3rd: When you are able to teach someone what you know.</p><p>And, for this reason, write in a blog help me to learn teaching others.</p><h3>To help</h3><p>The second one, is helping others what today I love: programming. I think that everybody‚Äôs like help others, and also, this my way to extend the help that I receive from others.</p><h3>Express my opinion</h3><p>Another reason is, as iOS Developer, I need to have a deep understand about the Apple ecosystem so, this will be a place to organize my thoughts about the news, products, events as WWDC‚Ä¶ but ever focused in coding</p><h3>Practice english</h3><p>And the last reason, (but no less important), practice to write tech documentation in English. My native language is Spanish, but globalization and remote working has opened a lot of opportunities. And English is today the key language for learn and work.<br><br>---</p><p>If you wanna know more about me, feel free to check my social media links (see the footer)</p><p>So, I hope you enjoy my posts! üôÇ</p>]]></content:encoded></item></channel></rss>